---
# Only the main Sass file needs front matter (the dashes are enough)
---

// Default theme colors
$theme-colors: (
  "coolblack": #090a0b,
  "spacegrey": #353535,
  "snowwhite": #ffffff,
);

// Default brand colors
$brand-colors: (
  "orangered": #ff5100,
  "greatgold": #f2cb05,
  "greenblue": #389092,
);

$theme-name: "{{ site.theme_color }}";
$brand-name: "{{ site.brand_color }}";
$theme-color: map-get($theme-colors, "snowwhite");
$brand-color: map-get($brand-colors, "orangered");

@if map-has-key($theme-colors, $theme-name) {
  $theme-color: map-get($theme-colors, $theme-name);
} @else if str-index($theme-name, "#") == 1 {
  $theme-color: {{ site.theme_color | default: '#ffffff' }};
}

@if map-has-key($brand-colors, $brand-name) {
  $brand-color: map-get($brand-colors, $brand-name);
} @else if str-index($brand-name, "#") == 1 {
  $brand-color: {{ site.brand_color | default: '#ff5100' }};
}

$content-width: {{ site.content_width | default: '920px' }};

@import "yat";



//  stollen from https://www.aleksandrhovhannisyan.com/blog/jekyll-comment-system-github-issues/

.flex {
  display: flex;
}

.flex-wrap {
  flex-wrap: wrap;
}

.flex-column {
  flex-direction: column;
}

.align-center {
  align-items: center;
}

.flex-center {
  display: flex;
  align-items: center;
  justify-content: center;
}

.justify-between {
  justify-content: space-between;
}

/* stylelint-disable value-keyword-case */
$tokens: (
  leading: (
    steps: (
      "4xs": 1.1,
      "3xs": 1.2,
      "2xs": 1.35,
      "xs": 1.4,
      "sm": 1.5,
      "base": 1.6,
      "md": 1.7,
      "lg": 1.8,
    ),
    customPropertyPrefix: "lh",
  ),
  fontSize: (
    steps: (
      "xs": (
        min: 12px,
        max: 13px,
      ),
      "sm": (
        min: 14px,
        max: 16px,
      ),
      "base": (
        min: 16px,
        max: 19px,
        leading: "base",
      ),
      "md": (
        min: 19px,
        max: 24px,
        leading: "sm",
      ),
      "lg": (
        min: 23px,
        max: 28px,
        leading: "xs",
      ),
      "xl": (
        min: 26px,
        max: 36px,
        leading: "2xs",
      ),
      "2xl": (
        min: 32px,
        max: 44px,
        leading: "2xs",
      ),
      "3xl": (
        min: 38px,
        max: 54px,
        leading: "3xs",
      ),
      "4xl": (
        min: 50px,
        max: 76px,
        leading: "4xs",
      ),
    ),
    breakpoints: (
      min: "mobile",
      max: "desktop",
    ),
    customPropertyPrefix: "fs",
  ),
  spacing: (
    steps: (
      "-4": 2px,
      "-3": 4px,
      "-2": 8px,
      "-1": 12px,
      "0": 16px,
      "1": 18px,
      "2": 20px,
      "3": 24px,
      "4": 28px,
      "5": 32px,
      "6": 36px,
      "7": 40px,
      "8": 48px,
      "9": 56px,
      "10": 64px,
      "11": 76px,
      "12": 96px,
    ),
    customPropertyPrefix: "sp",
  ),
  breakpoints: (
    "mobile-min": 360px,
    "mobile": 400px,
    "mobile-lg": 500px,
    "tablet-sm": 640px,
    "tablet": 768px,
    "desktop": 960px,
    "desktop-lg": 1024px,
  ),
);

$steps: (
  "-4": 2px,
  "-3": 4px,
  "-2": 8px,
  "-1": 12px,
  "0": 16px,
  "1": 18px,
  "2": 20px,
  "3": 24px,
  "4": 28px,
  "5": 32px,
  "6": 36px,
  "7": 40px,
  "8": 48px,
  "9": 56px,
  "10": 64px,
  "11": 76px,
  "12": 96px,
);

@use "sass:math";

// @function to-rems($value) {
//   // Check if the value, as a string, is already expressed in rems
//   @if ends-with("" + $value, "rem") {
//     @return $value;
//   }

//   $value-rems: math.div($value, 16px) * 1rem;
//   @return $value-rems;
// }

// /// Deep version of map.get
// @function get($map, $keys...) {
//   @each $key in $keys {
//     $map: map.get($map, $key);
//   }
//   @return $map;
// }

// /// Returns the string prefix that is used for the custom properties corresponding to the specified key in the design config.
// @function get-custom-property-prefix($key) {
//   $custom-property-prefix: get($tokens, $key, "customPropertyPrefix");
//   @if not $custom-property-prefix {
//     @error "#{$key} is missing a custom property prefix in the config";
//   }
//   @return $custom-property-prefix;
// }

// /// Returns the custom property declaration corresponding to the given step under the $type key in $tokens.
// /// Throws an error if the provided step is unrecognized.
// @function get-scale-step($type, $step) {
//   $steps: get($tokens, $type, "steps");
//   $prefix: get-custom-property-prefix($type);
//   @if not get($steps, $step) {
//     @error "#{$step} is not a valid step in the #{$type} scale.";
//   } @else {
//     @return var(--#{$prefix}-#{$step});
//   }
// }


@function spacing($step) {
  @return map-get($steps, $step);
}

// @function font-size($step) {
//   @return get-scale-step("fontSize", $step);
// }
// @function leading($step) {
//   @return get-scale-step("leading", $step);
// }

// /// Returns true if the given string ends with the given suffix.
// /// Adapted for use from: https://stackoverflow.com/a/40389473/5323344

// @function ends-with($string, $suffix) {
//   $string-length: string.length($string);
//   $suffix-length: string.length($suffix);
//   @return str-slice($string, ($string-length - $suffix-length + 1)) == $suffix;
// }

// @function rnd($number, $places: 0) {
//   $n: 1;
//   @if $places > 0 {
//     @for $i from 1 through $places {
//       $n: $n * 10;
//     }
//   }
//   @return math.div(math.round($number * $n), $n);
// }

// /// Returns a CSS clamp(...) declaration, with the responsive argument computed automatically.
// @function clamped($min-px, $max-px, $min-bp: get($tokens, "breakpoints", "mobile"), $max-bp: get($tokens, "breakpoints", "desktop")) {
//   $slope: math.div($max-px - $min-px, $max-bp - $min-bp);
//   $slope-vw: rnd($slope * 100, 2);
//   $intercept-rems: rnd(to-rems($min-px - $slope * $min-bp), 2);
//   $min-rems: rnd(to-rems($min-px), 2);
//   $max-rems: rnd(to-rems($max-px), 2);
//   @return clamp(#{$min-rems}, #{$slope-vw}vw + #{$intercept-rems}, #{$max-rems});
// }



// $spacing-steps: get($tokens, "spacing", "steps");
// $spacing-prefix: get-custom-property-prefix("spacing");

// html {
//   @each $step, $value in $spacing-steps {
//     /* stylelint-disable-next-line custom-property-pattern */
//     --#{$spacing-prefix}-#{$step}: #{$value};
//   }
// }



// @import "../mixins";

.comment-actions {
  margin-top: spacing(5);
}

.post-comment-button {
  border-radius: spacing(-3);
  padding: spacing(-2) spacing(0);
}



.post-comment {
  --avatar-size: #{spacing("5")};
  --meta-spacing: #{spacing("-2")};
  padding-inline-start: calc(var(--avatar-size) + var(--meta-spacing));

  &-avatar {
    align-self: flex-start;
    position: absolute;
    width: var(--avatar-size);
    left: calc(-1 * var(--avatar-size) - var(--meta-spacing));
  }

  &-edited {
    font-style: italic;
  }

  &-author {
    border-radius: spacing(-4);
    padding: spacing(-3) spacing(-2);
  }

  &-body {
    pre {
      white-space: pre-wrap;
    }

  }
}

.circle {
  aspect-ratio: 1;
  border-radius: 50%;
}